// NotesAdapter.kt
package com.example.foundit

import android.app.AlertDialog
import android.content.Context
import android.content.Intent
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.graphics.drawable.Drawable
import android.view.LayoutInflater
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.PopupMenu
import android.widget.TextView
import android.widget.Toast
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.ItemTouchHelper
import androidx.recyclerview.widget.RecyclerView
import com.example.foundit.databinding.PublicacionItemBinding

class NotesAdapter(private var notes: MutableList<Note>, context: Context) : RecyclerView.Adapter<NotesAdapter.NoteViewHolder>() {


    private val db: NoteDataBaseHelper = NoteDataBaseHelper(context)

    class NoteViewHolder(private val binding: PublicacionItemBinding) :
        RecyclerView.ViewHolder(binding.root) {
        val titleTextView: TextView = binding.titleTextView
        val contentTextView: TextView = binding.contentTextView
        val categoriaTextView: TextView = binding.Categoria
        val optionButton: ImageView = binding.optionsButton
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): NoteViewHolder {
        val binding = PublicacionItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return NoteViewHolder(binding)
    }

    override fun getItemCount(): Int = notes.size

    override fun onBindViewHolder(holder: NoteViewHolder, position: Int) {
        val note = notes[position]
        holder.titleTextView.text = note.title
        holder.contentTextView.text = note.message
        holder.categoriaTextView.text = note.category

        setupOptionsMenu(holder, note)
    }

    private fun setupOptionsMenu(holder: NoteViewHolder, note: Note) {
        holder.optionButton.setOnClickListener {
            val popupMenu = PopupMenu(holder.itemView.context, holder.optionButton)
            popupMenu.inflate(R.menu.note_item_menu)

            popupMenu.setOnMenuItemClickListener { menuItem ->
                when (menuItem.itemId) {
                    R.id.editOption -> {
                        editNoteAction(holder.itemView.context, note)
                        true
                    }
                    R.id.deleteOption -> {
                        confirmDeleteAction(holder.itemView.context, note, holder.adapterPosition)
                        true
                    }
                    else -> false
                }
            }

            popupMenu.show()
        }
    }

    private fun editNoteAction(context: Context, note: Note) {
        val intent = Intent(context, UpdateNoteActivity::class.java).apply {
            putExtra("note_id", note.id)
        }
        context.startActivity(intent)
    }

    private fun confirmDeleteAction(context: Context, note: Note, position: Int) {
        AlertDialog.Builder(context)
            .setTitle("Eliminar Nota")
            .setMessage("¿Estás seguro de que quieres eliminar esta nota?")
            .setPositiveButton("Eliminar") { _, _ ->
                db.deleteNote(note.id)
                removeItem(position)
                Toast.makeText(context, "Nota Eliminada", Toast.LENGTH_SHORT).show()
            }
            .setNegativeButton("Cancelar", null)
            .show()
    }

    fun refreshData(newNotes: MutableList<Note>) {
        notes.clear()
        notes.addAll(newNotes.reversed())
        notifyDataSetChanged()
    }

    private fun removeItem(position: Int) {
        notes.removeAt(position)
        notifyItemRemoved(position)
    }

    fun getItem(position: Int): Note {
        return notes[position]
    }

    fun enableSwipe(recyclerView: RecyclerView) {
        val swipeHandler = object : ItemTouchHelper.SimpleCallback(
            0,
            ItemTouchHelper.LEFT or ItemTouchHelper.RIGHT
        ) {
            override fun onMove(
                recyclerView: RecyclerView,
                viewHolder: RecyclerView.ViewHolder,
                target: RecyclerView.ViewHolder
            ): Boolean {
                return false
            }

            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {
                val position = viewHolder.adapterPosition
                val note = getItem(position)
                when (direction) {
                    ItemTouchHelper.LEFT -> {
                        editNoteAction(viewHolder.itemView.context, note)
                    }
                    ItemTouchHelper.RIGHT -> {
                        confirmDeleteAction(viewHolder.itemView.context, note, position)
                    }
                }
            }

            override fun onChildDraw(
                c: Canvas,
                recyclerView: RecyclerView,
                viewHolder: RecyclerView.ViewHolder,
                dX: Float,
                dY: Float,
                actionState: Int,
                isCurrentlyActive: Boolean
            ) {
                val iconLeft: Drawable? = ContextCompat.getDrawable(
                    viewHolder.itemView.context,
                    R.drawable.baseline_edit_24
                )
                val iconRight: Drawable? = ContextCompat.getDrawable(
                    viewHolder.itemView.context,
                    R.drawable.baseline_delete
                )
                val backgroundLeft = ColorDrawable(Color.BLUE)
                val backgroundRight = ColorDrawable(Color.RED)
                val itemView = viewHolder.itemView
                val iconMargin = (itemView.height - iconLeft!!.intrinsicHeight) / 2

                if(dX > 0) { // Swiping to the right (delete)
                    backgroundRight.setBounds(
                        itemView.left,
                        itemView.top,
                        itemView.right + dX.toInt(),
                        itemView.bottom
                    )
                    backgroundRight.draw(c)

                    // Draw the delete icon
                    val iconTop = itemView.top + (itemView.height - iconRight!!.intrinsicHeight) / 2
                    val iconBottom = iconTop + iconRight.intrinsicHeight
                    val iconLeftMargin = itemView.right - iconMargin - iconRight.intrinsicWidth
                    val iconRightMargin = itemView.right - iconMargin
                    iconRight.setBounds(iconLeftMargin, iconTop, iconRightMargin, iconBottom)
                    iconRight.draw(c)
                } else if (dX < 0) { // Swiping to the left (update)
                    backgroundLeft.setBounds(
                        itemView.left + dX.toInt(),
                        itemView.top,
                        itemView.right,
                        itemView.bottom
                    )
                    backgroundLeft.draw(c)

                    // Draw the update icon
                    val iconTop = itemView.top + (itemView.height - iconLeft!!.intrinsicHeight) / 2
                    val iconBottom = iconTop + iconLeft.intrinsicHeight
                    val iconLeftMargin = itemView.left + iconMargin
                    val iconRightMargin = itemView.left + iconMargin + iconLeft.intrinsicWidth
                    iconLeft.setBounds(iconLeftMargin, iconTop, iconRightMargin, iconBottom)
                    iconLeft.draw(c)
                }
                super.onChildDraw(c, recyclerView, viewHolder, dX, dY, actionState, isCurrentlyActive)
            }
        }
        val itemTouchHelper = ItemTouchHelper(swipeHandler)
        itemTouchHelper.attachToRecyclerView(recyclerView)
    }
}
